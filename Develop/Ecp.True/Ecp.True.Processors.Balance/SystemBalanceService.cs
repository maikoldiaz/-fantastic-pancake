// --------------------------------------------------------------------------------------------------------------------
// <copyright file="SystemBalanceService.cs" company="Microsoft">
//    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
//    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
//    OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
//    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//    OTHER DEALINGS IN THE SOFTWARE.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------
// <auto-generated />
namespace Ecp.True.Processors.Balance
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Ecp.True.Core;
    using Ecp.True.DataAccess.Interfaces;
    using Ecp.True.Entities.Admin;
    using Ecp.True.Entities.Core;
    using Ecp.True.Entities.Registration;
    using Ecp.True.Entities.TransportBalance;
    using Ecp.True.Processors.Balance.Calculation;
    using Ecp.True.Processors.Balance.Calculation.Interfaces;

    /// <summary>
    /// The system balance service.
    /// </summary>
    public class SystemBalanceService : SystemSegmentBalanceBase, ISystemBalanceService
    {
        /// <summary>
        /// The system calculator.
        /// </summary>
        private readonly ISystemCalculator systemCalculator;

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemBalanceService" /> class.
        /// </summary>
        /// <param name="repositoryFactory">The repository factory.</param>
        /// <param name="systemCalculator">The system calculator.</param>
        public SystemBalanceService(
            ISystemCalculator systemCalculator)
        {
            this.systemCalculator = systemCalculator;
        }

        /// <summary>
        /// Processes the ownership asynchronous.
        /// </summary>
        /// <param name="ticketId">The ticket identifier.</param>
        /// <param name="unitOfWork">The unit of work.</param>
        /// <returns>The Task.</returns>
        public async Task<IEnumerable<SystemUnbalance>> ProcessSystemAsync(int ticketId, IUnitOfWork unitOfWork)
        {
            ArgumentValidators.ThrowIfNull(unitOfWork, nameof(unitOfWork));
            var ticketRepository = unitOfWork.CreateRepository<Ticket>();
            var ticket = await ticketRepository.GetByIdAsync(ticketId).ConfigureAwait(false);
            var inventoriesAndMovements = await GetInventoriesAndMovementsAsync(ticket, unitOfWork).ConfigureAwait(false);
            var systems = await this.GetSegmentSystemsAsync(ticket, unitOfWork).ConfigureAwait(false);
            var dates = systems.Select(x => x.OperationDate).Distinct();
            var systemUnbalances = new List<SystemUnbalance>();

            foreach (var date in dates)
            {
                var systemIdsByDate = systems.Where(x => x.OperationDate.Date == date.Date).Select(s => s.SystemId);
                foreach (var systemId in systemIdsByDate)
                {
                    var systemNodesByDate = await this.GetSystemNodesAsync(systemId, date, unitOfWork).ConfigureAwait(false);
                    var movementsByDate = inventoriesAndMovements.movements.Where(x => x.OperationalDate.Date == date.Date);
                    var inventoriesByPreviousAndCurrentDate = inventoriesAndMovements.inventoryProducts.Where(
                        x =>
                        x.InventoryDate.GetValueOrDefault().Date == date.Date || x.InventoryDate.GetValueOrDefault().Date == date.AddDays(-1).Date);
                    var products = GetDateNodeProducts(systemNodesByDate, inventoriesByPreviousAndCurrentDate, movementsByDate);
                    foreach (var product in products)
                    {
                        var data = GetInventoriesAndMovementsForSystemAndProduct(
                                   product,
                                   date,
                                   inventoriesByPreviousAndCurrentDate,
                                   movementsByDate,
                                   systemNodesByDate);
                        var systemUnbalance = this.systemCalculator.CalculateAndGetSystemUnbalance(
                                   product,
                                   date,
                                   ticketId,
                                   ticket.CategoryElementId,
                                   systemId,
                                   data.inputMovements,
                                   data.outputMovements,
                                   data.initialInventories,
                                   data.finalInventories,
                                   data.sourceNodeMovements,
                                   data.destinationNodeMovements,
                                   unitOfWork);
                        systemUnbalances.Add(systemUnbalance);
                    }
                }
            }

            return systemUnbalances;
        }

        /// <summary>
        /// Gets the input movements.
        /// </summary>
        /// <param name="movements">The movements.</param>
        /// <param name="productId">The product.</param>
        /// <param name="systemNodes">The system nodes.</param>
        /// <returns>The collection of Input Movement.</returns>
        private static IEnumerable<Movement> GetSystemInputMovements(
            IEnumerable<Movement> movements,
            string productId,
            IEnumerable<SegmentNodeDto> systemNodes)
        {
            var inputMovements = GetSystemInputMovementsByProduct(movements, productId);
            return inputMovements.Where(x => (IsProductConvertionInSystem(systemNodes, x) ||
            (systemNodes.Any(y => y.NodeId == x.MovementDestination?.DestinationNodeId) && !systemNodes.Any(y => y.NodeId == x.MovementSource?.SourceNodeId))));
        }

        private static bool IsProductConvertionInSystem(IEnumerable<SegmentNodeDto> systemNodes, Movement movement)
        {
            return systemNodes.Any(y => y.NodeId == movement.MovementDestination?.DestinationNodeId)
                && systemNodes.Any(y => y.NodeId == movement.MovementSource?.SourceNodeId)
                && movement.MovementSource?.SourceProductId != movement.MovementDestination?.DestinationProductId;
        }

        /// <summary>
        /// Gets the input movements by product.
        /// </summary>
        /// <param name="movements">The movements.</param>
        /// <param name="productId">The product.</param>
        /// <returns>The collection of Input Movement by Product.</returns>
        private static IEnumerable<Movement> GetSystemInputMovementsByProduct(IEnumerable<Movement> movements, string productId)
        {
            return movements.Where(x => (x.MessageTypeId == (int)MessageType.Movement)
                       && x.MovementDestination?.DestinationProductId == productId);
        }

        /// <summary>
        /// Gets the output movements.
        /// </summary>
        /// <param name="movements">The movements.</param>
        /// <param name="productId">The product.</param>
        /// <param name="systemNodes">The system nodes.</param>
        /// <returns>The collection of Output Movement.</returns>
        private static IEnumerable<Movement> GetSystemOutputMovements(
            IEnumerable<Movement> movements,
            string productId,
            IEnumerable<SegmentNodeDto> systemNodes)
        {
            var outputMovements = GetSystemOutputMovementsByProduct(movements, productId);
            return outputMovements.Where(x => (IsProductConvertionInSystem(systemNodes, x) ||
            (systemNodes.Any(y => y.NodeId == x.MovementSource?.SourceNodeId) && !systemNodes.Any(y => y.NodeId == x.MovementDestination?.DestinationNodeId))));

        }

        /// <summary>
        /// Gets the output movements by product.
        /// </summary>
        /// <param name="movements">The movements.</param>
        /// <param name="productId">The product.</param>
        /// <returns>The collection of Output Movement by Product.</returns>
        private static IEnumerable<Movement> GetSystemOutputMovementsByProduct(IEnumerable<Movement> movements, string productId)
        {
            return movements.Where(x => (x.MessageTypeId == (int)MessageType.Movement)
                       && x.MovementSource?.SourceProductId == productId);
        }

        /// <summary>
        /// Gets the inventories and movements.
        /// </summary>
        /// <param name="product">The product.</param>
        /// <param name="date">The date.</param>
        /// <param name="inventoryProducts">The inventory products.</param>
        /// <param name="movements">The movements.</param>
        /// <param name="systemNodes">The system nodes.</param>
        /// <returns>The Input and Output Movements, Initial and Final inventories.</returns>
        private static (IEnumerable<Movement> inputMovements, IEnumerable<Movement> outputMovements, IEnumerable<InventoryProduct> initialInventories,
            IEnumerable<InventoryProduct> finalInventories, IEnumerable<Movement> sourceNodeMovements, IEnumerable<Movement> destinationNodeMovements)
            GetInventoriesAndMovementsForSystemAndProduct(
             string productId,
             DateTime date,
             IEnumerable<InventoryProduct> inventoryProducts,
             IEnumerable<Movement> movements,
             IEnumerable<SegmentNodeDto> systemNodes)
        {
            var inputMovements = GetSystemInputMovements(movements, productId, systemNodes);
            var outputMovements = GetSystemOutputMovements(movements, productId, systemNodes);
            var nodeMovements = GetNodeMovements(systemNodes, movements);

            var initialInventories = inventoryProducts.Where(
                y =>
                systemNodes.Any(x => x.NodeId == y.NodeId) &&
                y.InventoryDate.GetValueOrDefault().Date == date.AddDays(-1).Date &&
                y.ProductId == productId);

            var finalInventories = inventoryProducts.Where(
                y =>
                systemNodes.Any(x => x.NodeId == y.NodeId) &&
                y.InventoryDate.GetValueOrDefault().Date == date.Date &&
                y.ProductId == productId);

            return (inputMovements, outputMovements, initialInventories, finalInventories, nodeMovements.sourceNodeMovements, nodeMovements.destinationNodeMovements);
        }

        private static (IEnumerable<Movement> sourceNodeMovements, IEnumerable<Movement> destinationNodeMovements)
            GetNodeMovements(IEnumerable<SegmentNodeDto> systemNodes, IEnumerable<Movement> movements)
        {
            var sourceNodeMovements = movements.Where(x => systemNodes.Any(y => y.NodeId == x.MovementSource?.SourceNodeId));
            var destinationNodeMovements = movements.Where(x => systemNodes.Any(y => y.NodeId == x.MovementDestination?.DestinationNodeId));
            return (sourceNodeMovements, destinationNodeMovements);
        }

        /// <summary>
        /// Gets the output movements.
        /// </summary>
        /// <param name="segmentNodes">The segment nodes.</param>
        /// <param name="inventoryProducts">The inventory products.</param>
        /// <param name="movements">The movements.</param>
        /// <returns>The collection of Output Movement.</returns>
        private static IEnumerable<string> GetDateNodeProducts(
            IEnumerable<SegmentNodeDto> systemNodes,
            IEnumerable<InventoryProduct> inventoryProducts,
            IEnumerable<Movement> movements)
        {
            var nodeMovements = GetNodeMovements(systemNodes, movements);
            var movementProducts = nodeMovements.sourceNodeMovements.Select(x => x.MovementSource?.SourceProductId).Distinct()
                .Union(nodeMovements.destinationNodeMovements.Select(x => x.MovementDestination?.DestinationProductId).Distinct());
            var inventoriesForSystemNodes = inventoryProducts.Where(x => systemNodes.Any(y => y.NodeId == x.NodeId));
            var invProducts = inventoriesForSystemNodes.Select(x => x.ProductId).Distinct();
            var products = movementProducts.Union(invProducts);
            products = products.Where(x => x != null);

            return products;
        }

        /// <summary>
        /// Gets the segment nodes asynchronous.
        /// </summary>
        /// <param name="ticket">The ticket.</param>
        /// <param name="unitOfWork">The unit of work.</param>
        /// <returns>The collection of Segment Nodes.</returns>
        private async Task<IEnumerable<SystemDto>> GetSegmentSystemsAsync(Ticket ticket, IUnitOfWork unitOfWork)
        {
            var systems = new List<SystemDto>();
            var parameters = new Dictionary<string, object>
            {
                { "@SegmentId", ticket.CategoryElementId },
                { "@StartDate", ticket.StartDate.Date },
                { "@EndDate", ticket.EndDate.Date },
            };

            await this.GetDataFromRepositoryAsync<SystemDto>(
            (systemOutputs) => systems = systemOutputs.ToList(),
            Repositories.Constants.GetAllSystemsInSegmentProcedureName,
            parameters,
            unitOfWork).ConfigureAwait(false);

            return systems.AsEnumerable();
        }

        /// <summary>
        /// Gets the segment nodes asynchronous.
        /// </summary>
        /// <param name="systemId">The system id.</param>
        /// <param name="date">The ticket.</param>
        /// <param name="unitOfWork">The unit of work.</param>
        /// <returns>The collection of Segment Nodes.</returns>
        private async Task<IEnumerable<SegmentNodeDto>> GetSystemNodesAsync(int systemId, DateTime date, IUnitOfWork unitOfWork)
        {
            var systemNodes = new List<SegmentNodeDto>();
            var parameters = new Dictionary<string, object>
            {
                { "@SystemId", systemId },
                { "@StartDate", date.Date },
                { "@EndDate", date.Date },
            };

            await this.GetDataFromRepositoryAsync<SegmentNodeDto>(
            (systemNodesOutput) => systemNodes = systemNodesOutput.ToList(),
            Repositories.Constants.GetAllNodesInSystemProcedureName,
            parameters,
            unitOfWork).ConfigureAwait(false);

            return systemNodes.AsEnumerable();
        }

        private async Task GetDataFromRepositoryAsync<T>(Action<IEnumerable<T>> setter, string storedProcedureName, IDictionary<string, object> parameters, IUnitOfWork unitOfWork)
where T : class, IEntity
        {
            setter(await unitOfWork.CreateRepository<T>()
                            .ExecuteQueryAsync(storedProcedureName, parameters).ConfigureAwait(false));
        }
    }
}

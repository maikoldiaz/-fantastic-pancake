// --------------------------------------------------------------------------------------------------------------------
// <copyright file="NodeOwnershipRepository.cs" company="Microsoft">
//    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
//    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
//    OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
//    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//    OTHER DEALINGS IN THE SOFTWARE.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------
// <auto-generated />

namespace Ecp.True.Repositories.Specialized
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Ecp.True.Core;
    using Ecp.True.DataAccess.Interfaces;
    using Ecp.True.DataAccess.Sql;
    using Ecp.True.Entities.Admin;
    using Microsoft.EntityFrameworkCore;

    public class NodeOwnershipRepository : INodeOwnershipRepository
    {
        /// <summary>
        /// The SQL data access.
        /// </summary>
        private readonly ISqlDataAccess<NodeConnectionProductOwner> sqlDataAccess;

        /// <summary>
        /// The SQL node connection product data access
        /// </summary>
        private readonly ISqlDataAccess<NodeConnectionProduct> sqlNodeConnectionProductDataAccess;
        
        /// <summary>
        /// The SQL node connection data access
        /// </summary>
        private readonly ISqlDataAccess<NodeConnection> sqlNodeConnectionDataAccess;

        /// <summary>
        /// The SQL node connection data access
        /// </summary>
        private readonly ISqlDataAccess<Node> sqlNodeDataAccess;

        /// <summary>
        /// The SQL node connection data access
        /// </summary>
        private readonly ISqlDataAccess<NodeStorageLocation> sqlNodeStorageLocationDataAccess;

        /// <summary>
        /// The SQL node connection data access
        /// </summary>
        private readonly ISqlDataAccess<StorageLocationProduct> sqlStorageLocationProductDataAccess;

        /// <summary>
        /// The SQL node connection data access
        /// </summary>
        private readonly ISqlDataAccess<StorageLocationProductOwner> sqlStorageLocationProductOwnerDataAccess;

        /// <summary>
        /// The SQL node connection data access
        /// </summary>
        private readonly ISqlDataAccess<Product> sqpProductDataAccess;

        /// <summary>
        /// Initializes a new instance of the <see cref="NodeOwnershipRepository"/> class.
        /// </summary>
        /// <param name="sqlDataAccess">The SQL data access.</param>
        /// <param name="sqlNodeConnectionProductDataAccess">The SQL node connection product data access.</param>
        /// <param name="sqlNodeConnectionDataAccess">The SQL node connection data access.</param>
        public NodeOwnershipRepository(
            ISqlDataAccess<NodeConnectionProductOwner> sqlDataAccess,
            ISqlDataAccess<NodeConnectionProduct> sqlNodeConnectionProductDataAccess,
            ISqlDataAccess<NodeConnection> sqlNodeConnectionDataAccess,
            ISqlDataAccess<Node> sqlNodeDataAccess,
            ISqlDataAccess<NodeStorageLocation> sqlNodeStorageLocationDataAccess,
            ISqlDataAccess<StorageLocationProduct> sqlStorageLocationProductDataAccess,
            ISqlDataAccess<StorageLocationProductOwner> sqlStorageLocationProductOwnerDataAccess,
            ISqlDataAccess<Product> sqpProductDataAccess
            )
        {
            this.sqlDataAccess = sqlDataAccess;
            this.sqlNodeConnectionProductDataAccess = sqlNodeConnectionProductDataAccess;
            this.sqlNodeConnectionDataAccess = sqlNodeConnectionDataAccess;
            this.sqlNodeDataAccess = sqlNodeDataAccess;
            this.sqlNodeStorageLocationDataAccess = sqlNodeStorageLocationDataAccess;
            this.sqlStorageLocationProductDataAccess = sqlStorageLocationProductDataAccess;
            this.sqlStorageLocationProductOwnerDataAccess = sqlStorageLocationProductOwnerDataAccess;
            this.sqpProductDataAccess = sqpProductDataAccess;
        }

        /// <summary>
        /// Gets the Nodes.
        /// </summary>
        /// <value>
        /// The Nodes.
        /// </value>
        private IQueryable<NodeConnectionProductOwner> NodeConnectionProductOwners => this.sqlDataAccess.EntitySet();

        /// <summary>
        /// Gets the node connection products.
        /// </summary>
        /// <value>
        /// The node connection products.
        /// </value>
        private IQueryable<NodeConnectionProduct> NodeConnectionProducts => this.sqlDataAccess.Set<NodeConnectionProduct>();

        /// <summary>
        /// Gets the node connections.
        /// </summary>
        /// <value>
        /// The node connections.
        /// </value>
        private IQueryable<NodeConnection> NodeConnections => this.sqlDataAccess.Set<NodeConnection>();

        /// <summary>
        /// Gets the node storage locations.
        /// </summary>
        /// <value>
        /// The node storage locations.
        /// </value>
        private IQueryable<NodeStorageLocation> NodeStorageLocations => this.sqlDataAccess.Set<NodeStorageLocation>();

        /// <summary>
        /// Gets the node storage locations.
        /// </summary>
        /// <value>
        /// The node storage locations.
        /// </value>
        private IQueryable<StorageLocationProduct> StorageLocationProducts => this.sqlDataAccess.Set<StorageLocationProduct>();

        /// <summary>
        /// Gets the node storage locations.
        /// </summary>
        /// <value>
        /// The node storage locations.
        /// </value>
        private IQueryable<StorageLocationProductOwner> StorageLocationProductOwners => this.sqlDataAccess.Set<StorageLocationProductOwner>();

        public async Task<IEnumerable<NodeConnectionProductOwner>> GetOwnersForMovementAsync(int sourceNodeId, int destinationNodeId, string productId)
        {
            var query = from nodeowner in this.NodeConnectionProductOwners
                        join nodeConnectionProduct in this.NodeConnectionProducts
                        on nodeowner.NodeConnectionProductId equals nodeConnectionProduct.NodeConnectionProductId
                        join nodeConnection in this.NodeConnections
                        on nodeConnectionProduct.NodeConnectionId equals nodeConnection.NodeConnectionId
                        where nodeConnection.SourceNodeId == sourceNodeId
                        && nodeConnection.DestinationNodeId == destinationNodeId
                        && nodeConnectionProduct.ProductId == productId
                        select nodeowner;

            return await query.Include("Owner").ToListAsync().ConfigureAwait(false);
        }

        public async Task<IEnumerable<StorageLocationProductOwner>> GetOwnersForInventoryAsync(int nodeId, string productId)
        {
            var nodeStorageLocationQuery = from nodeStorageLocation in this.NodeStorageLocations
                         where nodeStorageLocation.NodeId == nodeId select nodeStorageLocation;

            var storageLocationProductQuery = from storageLocationProduct in this.StorageLocationProducts
                         where storageLocationProduct.ProductId == productId select storageLocationProduct;

            var query = from q2 in nodeStorageLocationQuery
                    join q3 in storageLocationProductQuery
                    on q2.NodeStorageLocationId equals q3.NodeStorageLocationId
                    join storageLocationProductOwner in this.StorageLocationProductOwners
                    on q3.StorageLocationProductId equals storageLocationProductOwner.StorageLocationProductId
                    select storageLocationProductOwner;

            var results = await query.Include("Owner").ToListAsync().ConfigureAwait(false);
            var distinctResults = results.Distinct(new StorageLocationProductOwnerComparer());

            return distinctResults;
        }
    }

    class StorageLocationProductOwnerComparer : IEqualityComparer<StorageLocationProductOwner>
    {
        public bool Equals(StorageLocationProductOwner x, StorageLocationProductOwner y)
        {
            return x?.OwnerId == y?.OwnerId;
        }

        public int GetHashCode(StorageLocationProductOwner obj)
        {
            ArgumentValidators.ThrowIfNull(obj, nameof(obj));
            return obj.OwnerId.GetHashCode();
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ecp.True.Perf.Tests
{
    using System;
    using System.Collections.Generic;

    using Microsoft.VisualStudio.TestTools.WebTesting;
    using Microsoft.VisualStudio.TestTools.WebTesting.Rules;

    [Priority(0)]
    public class LoginHelper : WebTest
    {
        private RequestHelper requestHelper = new RequestHelper();

        public LoginHelper()
        {
            this.Init();
            this.PreWebTest += new EventHandler<PreWebTestEventArgs>(On_PreWebTest);
        }

        void On_PreWebTest(object sender, PreWebTestEventArgs e)
        {
            this.Context.CookieContainer = new System.Net.CookieContainer();
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            WebTestRequest request1 = new WebTestRequest((this.Context[nameof(WebTestEx.WebServer1)].ToString() + "/"));
            request1.ThinkTime = 1;
            request1.Timeout = 60;
            request1.FollowRedirects = false;
            request1.Headers.Add(new WebTestRequestHeader("Upgrade-Insecure-Requests", "1"));
            request1.Headers.Add(new WebTestRequestHeader("Sec-Fetch-Site", "none"));
            request1.Headers.Add(new WebTestRequestHeader("Sec-Fetch-Mode", "navigate"));
            ExtractHttpHeader extractionRule1 = new ExtractHttpHeader();
            extractionRule1.Header = "Location";
            extractionRule1.Required = true;
            extractionRule1.ContextParameterName = "u1";
            request1.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule1.Extract);
            ExtractHttpHeader extractionRule1_1 = new ExtractHttpHeader();
            extractionRule1_1.Header = "Set-Cookie";
            extractionRule1_1.Required = true;
            extractionRule1_1.ContextParameterName = "ck";
            request1.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule1_1.Extract);
            yield return request1;
            request1 = null;

            WebTestRequest request2 = new WebTestRequest(this.Context["u1"].ToString());
            request2.ThinkTime = 8;
            request2.Timeout = 60;
            request2.Headers.Add(new WebTestRequestHeader("Upgrade-Insecure-Requests", "1"));
            request2.Headers.Add(new WebTestRequestHeader("Sec-Fetch-Site", "same-origin"));
            request2.Headers.Add(new WebTestRequestHeader("Sec-Fetch-Mode", "navigate"));
            yield return request2;
            request2 = null;

            WebTestRequest request3 = new WebTestRequest(this.Context["u1"].ToString());
            request3.ThinkTime = 8;
            request3.Timeout = 60;
            request3.Headers.Add(new WebTestRequestHeader("Upgrade-Insecure-Requests", "1"));
            request3.Headers.Add(new WebTestRequestHeader("Sec-Fetch-Site", "same-origin"));
            request3.Headers.Add(new WebTestRequestHeader("Sec-Fetch-Mode", "navigate"));
            request3.QueryStringParameters.Add("sso_reload", "true");
            ExtractText extractionRule2 = new ExtractText();
            extractionRule2.StartsWith = "ctx%3d";
            extractionRule2.EndsWith = "\\u0026";
            extractionRule2.IgnoreCase = false;
            extractionRule2.UseRegularExpression = false;
            extractionRule2.Required = true;
            extractionRule2.ExtractRandomMatch = false;
            extractionRule2.Index = 0;
            extractionRule2.HtmlDecode = true;
            extractionRule2.SearchInHeaders = false;
            extractionRule2.ContextParameterName = "param_ctx";
            request3.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule2.Extract);
            ExtractText extractionRule3 = new ExtractText();
            extractionRule3.StartsWith = "\"sFT\":\"";
            extractionRule3.EndsWith = "\"";
            extractionRule3.IgnoreCase = false;
            extractionRule3.UseRegularExpression = false;
            extractionRule3.Required = true;
            extractionRule3.ExtractRandomMatch = false;
            extractionRule3.Index = 0;
            extractionRule3.HtmlDecode = true;
            extractionRule3.SearchInHeaders = false;
            extractionRule3.ContextParameterName = "param_sft";
            request3.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule3.Extract);
            ExtractText extractionRule4 = new ExtractText();
            extractionRule4.StartsWith = "client-request-id=";
            extractionRule4.EndsWith = "\"";
            extractionRule4.IgnoreCase = false;
            extractionRule4.UseRegularExpression = false;
            extractionRule4.Required = true;
            extractionRule4.ExtractRandomMatch = false;
            extractionRule4.Index = 0;
            extractionRule4.HtmlDecode = true;
            extractionRule4.SearchInHeaders = false;
            extractionRule4.ContextParameterName = "param_crid";
            request3.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule4.Extract);
            yield return request3;
            request3 = null;

            WebTestRequest request4 = new WebTestRequest((this.Context[nameof(WebTestEx.WebServer3)].ToString() + "/common/GetCredentialType"));
            request4.ThinkTime = 6;
            request4.Timeout = 60;
            request4.Method = "POST";
            request4.Headers.Add(new WebTestRequestHeader("hpgrequestid", "25c46db4-5499-43a0-88ad-2009537d9c01"));
            request4.Headers.Add(new WebTestRequestHeader("Origin", this.Context[nameof(WebTestEx.WebServer3)].ToString()));
            request4.Headers.Add(new WebTestRequestHeader("client-request-id", this.Context["param_crid"].ToString()));
            request4.Headers.Add(new WebTestRequestHeader("canary", this.Context["param_ctx"].ToString()));
            request4.Headers.Add(new WebTestRequestHeader("Content-type", "application/json; charset=UTF-8"));
            request4.Headers.Add(new WebTestRequestHeader("hpgid", "1104"));
            request4.Headers.Add(new WebTestRequestHeader("hpgact", "1800"));
            request4.Headers.Add(new WebTestRequestHeader("Sec-Fetch-Site", "same-origin"));
            request4.Headers.Add(new WebTestRequestHeader("Sec-Fetch-Mode", "cors"));
            request4.QueryStringParameters.Add("mkt", "en-US");
            StringHttpBody request4Body = new StringHttpBody();
            request4Body.ContentType = "application/json; charset=UTF-8";
            request4Body.InsertByteOrderMark = false;
            request4Body.BodyString = ("{\"username\":\"trueadmin@ecopetrol.com.co\",\"isOtherIdpSupported\":true,\"checkPhones\"" +
                ":false,\"isRemoteNGCSupported\":true,\"isCookieBannerShown\":false,\"isFidoSupported\"" +
                ":true,\"originalRequest\":\""
                        + (this.Context["param_ctx"].ToString()
                        + ("\",\"country\":\"IN\",\"forceotclogin\":false,\"isExternalFederationDisallowed\":false,\"is" +
                            "RemoteConnectSupported\":false,\"federationFlags\":0,\"flowToken\":\""
                        + (this.Context["param_sft"].ToString() + "\",\"isAccessPassSupported\":true}"))));
            request4.Body = request4Body;
            ExtractText extractionRule5 = new ExtractText();
            extractionRule5.StartsWith = "stsrequest%3d";
            extractionRule5.EndsWith = "\"";
            extractionRule5.IgnoreCase = false;
            extractionRule5.UseRegularExpression = false;
            extractionRule5.Required = true;
            extractionRule5.ExtractRandomMatch = false;
            extractionRule5.Index = 0;
            extractionRule5.HtmlDecode = true;
            extractionRule5.SearchInHeaders = false;
            extractionRule5.ContextParameterName = "param_sts";
            request4.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule5.Extract);
            yield return request4;
            request4 = null;

            WebTestRequest request5 = new WebTestRequest((this.Context[nameof(WebTestEx.WebServer2)].ToString() + "/adfs/ls/"));
            request5.ThinkTime = 10;
            request5.Timeout = 60;
            request5.Headers.Add(new WebTestRequestHeader("Upgrade-Insecure-Requests", "1"));
            request5.Headers.Add(new WebTestRequestHeader("Sec-Fetch-User", "?1"));
            request5.Headers.Add(new WebTestRequestHeader("Sec-Fetch-Site", "cross-site"));
            request5.Headers.Add(new WebTestRequestHeader("Sec-Fetch-Mode", "navigate"));
            request5.QueryStringParameters.Add("client-request-id", this.Context["param_crid"].ToString());
            request5.QueryStringParameters.Add("wa", "wsignin1.0");
            request5.QueryStringParameters.Add("wtrealm", "urn:federation:MicrosoftOnline");
            request5.QueryStringParameters.Add("wctx", ("LoginOptions=3&estsredirect=2&estsrequest=" + this.Context["param_sts"].ToString()));
            request5.QueryStringParameters.Add("cbcxt", "");
            request5.QueryStringParameters.Add("username", "trueadmin@ecopetrol.com.co");
            request5.QueryStringParameters.Add("mkt", "");
            request5.QueryStringParameters.Add("lc", "");
            yield return request5;
            request5 = null;

            this.BeginTransaction("Home Page Include Authentication");

            WebTestRequest request6 = new WebTestRequest((this.Context[nameof(WebTestEx.WebServer2)].ToString() + "/adfs/ls/"));
            request6.Timeout = 60;
            request6.Method = "POST";
            request6.Headers.Add(new WebTestRequestHeader("Origin", this.Context[nameof(WebTestEx.WebServer2)].ToString()));
            request6.Headers.Add(new WebTestRequestHeader("Upgrade-Insecure-Requests", "1"));
            request6.Headers.Add(new WebTestRequestHeader("Content-Type", "application/x-www-form-urlencoded"));
            request6.Headers.Add(new WebTestRequestHeader("Sec-Fetch-User", "?1"));
            request6.Headers.Add(new WebTestRequestHeader("Sec-Fetch-Site", "same-origin"));
            request6.Headers.Add(new WebTestRequestHeader("Sec-Fetch-Mode", "navigate"));
            request6.QueryStringParameters.Add("client-request-id", this.Context["param_crid"].ToString());
            request6.QueryStringParameters.Add("wa", "wsignin1.0");
            request6.QueryStringParameters.Add("wtrealm", "urn:federation:MicrosoftOnline");
            request6.QueryStringParameters.Add("wctx", ("LoginOptions=3&estsredirect=2&estsrequest=" + this.Context["param_sts"].ToString()));
            request6.QueryStringParameters.Add("cbcxt", "");
            request6.QueryStringParameters.Add("username", "trueadmin@ecopetrol.com.co");
            request6.QueryStringParameters.Add("mkt", "");
            request6.QueryStringParameters.Add("lc", "");
            FormPostHttpBody request6Body = new FormPostHttpBody();
            request6Body.FormPostParameters.Add(nameof(this.UserName), nameof(this.UserName).GetConfigValue());
            request6Body.FormPostParameters.Add(nameof(this.Password), nameof(this.Password).GetConfigValue());
            request6Body.FormPostParameters.Add("AuthMethod", "FormsAuthentication");
            request6.Body = request6Body;
            ExtractText extractionRule6 = new ExtractText();
            extractionRule6.StartsWith = "wresult\" value=\"";
            extractionRule6.EndsWith = "\"";
            extractionRule6.IgnoreCase = false;
            extractionRule6.UseRegularExpression = false;
            extractionRule6.Required = true;
            extractionRule6.ExtractRandomMatch = false;
            extractionRule6.Index = 0;
            extractionRule6.HtmlDecode = true;
            extractionRule6.SearchInHeaders = false;
            extractionRule6.ContextParameterName = "param_wrs";
            request6.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule6.Extract);
            ExtractText extractionRule7 = new ExtractText();
            extractionRule7.StartsWith = "wresult\" value=\"";
            extractionRule7.EndsWith = "\"";
            extractionRule7.IgnoreCase = false;
            extractionRule7.UseRegularExpression = false;
            extractionRule7.Required = true;
            extractionRule7.ExtractRandomMatch = false;
            extractionRule7.Index = 0;
            extractionRule7.HtmlDecode = true;
            extractionRule7.SearchInHeaders = false;
            extractionRule7.ContextParameterName = "param_wrs";
            request6.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule7.Extract);
            yield return request6;
            request6 = null;

            WebTestRequest request7 = new WebTestRequest((this.Context[nameof(WebTestEx.WebServer3)].ToString() + "/login.srf"));
            request7.ThinkTime = 3;
            request7.Timeout = 60;
            request7.Method = "POST";
            request7.Headers.Add(new WebTestRequestHeader("Origin", this.Context[nameof(WebTestEx.WebServer2)].ToString()));
            request7.Headers.Add(new WebTestRequestHeader("Upgrade-Insecure-Requests", "1"));
            request7.Headers.Add(new WebTestRequestHeader("Content-Type", "application/x-www-form-urlencoded"));
            request7.Headers.Add(new WebTestRequestHeader("Sec-Fetch-Site", "cross-site"));
            request7.Headers.Add(new WebTestRequestHeader("Sec-Fetch-Mode", "navigate"));
            FormPostHttpBody request7Body = new FormPostHttpBody();
            request7Body.FormPostParameters.Add("wa", "wsignin1.0");
            request7Body.FormPostParameters.Add("wresult", this.Context["param_wrs"].ToString());
            request7Body.FormPostParameters.Add("wctx", ("LoginOptions=3&estsredirect=2&estsrequest=" + this.Context["param_sts"].ToString()));
            request7.Body = request7Body;
            ExtractText extractionRule8 = new ExtractText();
            extractionRule8.StartsWith = "\"canary\":\"";
            extractionRule8.EndsWith = "\"";
            extractionRule8.IgnoreCase = false;
            extractionRule8.UseRegularExpression = false;
            extractionRule8.Required = true;
            extractionRule8.ExtractRandomMatch = false;
            extractionRule8.Index = 0;
            extractionRule8.HtmlDecode = true;
            extractionRule8.SearchInHeaders = false;
            extractionRule8.ContextParameterName = "param_can";
            request7.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule8.Extract);
            ExtractText extractionRule9 = new ExtractText();
            extractionRule9.StartsWith = "\"sessionId\":\"";
            extractionRule9.EndsWith = "\"";
            extractionRule9.IgnoreCase = false;
            extractionRule9.UseRegularExpression = false;
            extractionRule9.Required = true;
            extractionRule9.ExtractRandomMatch = false;
            extractionRule9.Index = 0;
            extractionRule9.HtmlDecode = true;
            extractionRule9.SearchInHeaders = false;
            extractionRule9.ContextParameterName = "param_ses";
            request7.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule9.Extract);
            ExtractText extractionRule10 = new ExtractText();
            extractionRule10.StartsWith = "\"sFT\":\"";
            extractionRule10.EndsWith = "\"";
            extractionRule10.IgnoreCase = false;
            extractionRule10.UseRegularExpression = false;
            extractionRule10.Required = true;
            extractionRule10.ExtractRandomMatch = false;
            extractionRule10.Index = 0;
            extractionRule10.HtmlDecode = true;
            extractionRule10.SearchInHeaders = false;
            extractionRule10.ContextParameterName = "param_sft1";
            request7.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule10.Extract);
            ExtractText extractionRule11 = new ExtractText();
            extractionRule11.StartsWith = "sCtx\":\"";
            extractionRule11.EndsWith = "\"";
            extractionRule11.IgnoreCase = false;
            extractionRule11.UseRegularExpression = false;
            extractionRule11.Required = true;
            extractionRule11.ExtractRandomMatch = false;
            extractionRule11.Index = 0;
            extractionRule11.HtmlDecode = true;
            extractionRule11.SearchInHeaders = false;
            extractionRule11.ContextParameterName = "param_ctx1";
            request7.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule11.Extract);
            yield return request7;
            request7 = null;

            WebTestRequest request8 = new WebTestRequest((this.Context[nameof(WebTestEx.WebServer3)].ToString() + "/kmsi"));
            request8.Timeout = 60;
            request8.Method = "POST";
            request8.Headers.Add(new WebTestRequestHeader("Origin", this.Context[nameof(WebTestEx.WebServer3)].ToString()));
            request8.Headers.Add(new WebTestRequestHeader("Upgrade-Insecure-Requests", "1"));
            request8.Headers.Add(new WebTestRequestHeader("Content-Type", "application/x-www-form-urlencoded"));
            request8.Headers.Add(new WebTestRequestHeader("Sec-Fetch-User", "?1"));
            request8.Headers.Add(new WebTestRequestHeader("Sec-Fetch-Site", "same-origin"));
            request8.Headers.Add(new WebTestRequestHeader("Sec-Fetch-Mode", "navigate"));
            FormPostHttpBody request8Body = new FormPostHttpBody();
            request8Body.FormPostParameters.Add("LoginOptions", "1");
            request8Body.FormPostParameters.Add("type", "28");
            request8Body.FormPostParameters.Add("ctx", this.Context["param_ctx1"].ToString());
            request8Body.FormPostParameters.Add("hpgrequestid", this.Context["param_ses"].ToString());
            request8Body.FormPostParameters.Add("flowToken", this.Context["param_sft1"].ToString());
            request8Body.FormPostParameters.Add("canary", this.Context["param_can"].ToString());
            request8Body.FormPostParameters.Add("i2", "");
            request8Body.FormPostParameters.Add("i17", "");
            request8Body.FormPostParameters.Add("i18", "");
            request8Body.FormPostParameters.Add("i19", "2522");
            request8.Body = request8Body;
            ExtractText extractionRule12 = new ExtractText();
            extractionRule12.StartsWith = "\"session_state\" value=\"";
            extractionRule12.EndsWith = "\"";
            extractionRule12.IgnoreCase = false;
            extractionRule12.UseRegularExpression = false;
            extractionRule12.Required = true;
            extractionRule12.ExtractRandomMatch = false;
            extractionRule12.Index = 0;
            extractionRule12.HtmlDecode = true;
            extractionRule12.SearchInHeaders = false;
            extractionRule12.ContextParameterName = "param_sst";
            request8.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule12.Extract);
            ExtractText extractionRule13 = new ExtractText();
            extractionRule13.StartsWith = "\"state\" value=\"";
            extractionRule13.EndsWith = "\"";
            extractionRule13.IgnoreCase = false;
            extractionRule13.UseRegularExpression = false;
            extractionRule13.Required = true;
            extractionRule13.ExtractRandomMatch = false;
            extractionRule13.Index = 0;
            extractionRule13.HtmlDecode = true;
            extractionRule13.SearchInHeaders = false;
            extractionRule13.ContextParameterName = "param_sta_temp";
            request8.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule13.Extract);
            ExtractText extractionRule14 = new ExtractText();
            extractionRule14.StartsWith = "\"id_token\" value=\"";
            extractionRule14.EndsWith = "\"";
            extractionRule14.IgnoreCase = false;
            extractionRule14.UseRegularExpression = false;
            extractionRule14.Required = true;
            extractionRule14.ExtractRandomMatch = false;
            extractionRule14.Index = 0;
            extractionRule14.HtmlDecode = true;
            extractionRule14.SearchInHeaders = false;
            extractionRule14.ContextParameterName = "param_tok";
            request8.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule14.Extract);
            ExtractText extractionRule15 = new ExtractText();
            extractionRule15.StartsWith = "\"code\" value=\"";
            extractionRule15.EndsWith = "\"";
            extractionRule15.IgnoreCase = false;
            extractionRule15.UseRegularExpression = false;
            extractionRule15.Required = true;
            extractionRule15.ExtractRandomMatch = false;
            extractionRule15.Index = 0;
            extractionRule15.HtmlDecode = true;
            extractionRule15.SearchInHeaders = false;
            extractionRule15.ContextParameterName = "param_cod";
            request8.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule15.Extract);
            yield return request8;
            request8 = null;
            this.BeginTransaction("Home Page Exclude Authentication");

            WebTestRequest request9 = new WebTestRequest((this.Context[nameof(WebTestEx.WebServer1)].ToString() + "/signin-oidc"));
            request9.ThinkTime = 5;
            request9.Timeout = 60;
            request9.Method = "POST";
            request9.ParseDependentRequests = false;
            request9.Headers.Add(new WebTestRequestHeader("Cookie", this.Context["ck"].ToString().Replace("path=/signin-oidc;","")));
            request9.Headers.Add(new WebTestRequestHeader("Origin", this.Context[nameof(WebTestEx.WebServer3)].ToString()));
            request9.Headers.Add(new WebTestRequestHeader("Upgrade-Insecure-Requests", "1"));
            request9.Headers.Add(new WebTestRequestHeader("Content-Type", "application/x-www-form-urlencoded"));
            request9.Headers.Add(new WebTestRequestHeader("Sec-Fetch-Site", "cross-site"));
            request9.Headers.Add(new WebTestRequestHeader("Sec-Fetch-Mode", "navigate"));
            FormPostHttpBody request9Body = new FormPostHttpBody();
            request9Body.FormPostParameters.Add("code", this.Context["param_cod"].ToString());
            request9Body.FormPostParameters.Add("id_token", this.Context["param_tok"].ToString());
            request9Body.FormPostParameters.Add("state", this.Context["param_sta_temp"].ToString());
            request9Body.FormPostParameters.Add("session_state", this.Context["param_sst"].ToString());
            request9.Body = request9Body;
            yield return request9;
            request9 = null;

            WebTestRequest request10 = new WebTestRequest((this.Context[nameof(WebTestEx.WebServer1)].ToString() + "/v1/bootstrap"));
            request10.Timeout = 60;
            request10.Headers.Add(new WebTestRequestHeader("pragma", "no-cache"));
            //request10.Headers.Add(new WebTestRequestHeader("request-id", "e207367b-68b1-40a5-b8ab-4f7728134d15"));
            request10.Headers.Add(new WebTestRequestHeader("whoami", "fetchMiddleware"));
            request10.Headers.Add(new WebTestRequestHeader("content-type", "application/json"));
            request10.Headers.Add(new WebTestRequestHeader("Sec-Fetch-Site", "same-origin"));
            request10.Headers.Add(new WebTestRequestHeader("Sec-Fetch-Mode", "cors"));
            yield return request10;
            request10 = null;

            
            WebTestRequest request12 = new WebTestRequest((this.Context[nameof(WebTestEx.WebServer1)].ToString() + "/v1/systemTypes"));
            request12.Timeout = 60;
            request12.Headers.Add(new WebTestRequestHeader("pragma", "no-cache"));
            //request12.Headers.Add(new WebTestRequestHeader("request-id", "6709ba24-7033-4583-98a3-12950b9b20bb"));
            request12.Headers.Add(new WebTestRequestHeader("whoami", "fetchMiddleware"));
            request12.Headers.Add(new WebTestRequestHeader("content-type", "application/json"));
            request12.Headers.Add(new WebTestRequestHeader("Sec-Fetch-Site", "same-origin"));
            request12.Headers.Add(new WebTestRequestHeader("Sec-Fetch-Mode", "cors"));
            //yield return request12;
            request12 = null;

            WebTestRequest request13 = new WebTestRequest((this.Context[nameof(WebTestEx.WebServer1)].ToString() + "/v1/logisticcenters"));
            request13.Timeout = 60;
            request13.Headers.Add(new WebTestRequestHeader("pragma", "no-cache"));
            //request13.Headers.Add(new WebTestRequestHeader("request-id", "dc301ea3-6469-4932-baa0-07344060c584"));
            request13.Headers.Add(new WebTestRequestHeader("whoami", "fetchMiddleware"));
            request13.Headers.Add(new WebTestRequestHeader("content-type", "application/json"));
            request13.Headers.Add(new WebTestRequestHeader("Sec-Fetch-Site", "same-origin"));
            request13.Headers.Add(new WebTestRequestHeader("Sec-Fetch-Mode", "cors"));
            yield return request13;
            request13 = null;

            WebTestRequest request14 = new WebTestRequest((this.Context[nameof(WebTestEx.WebServer1)].ToString() + "/v1/storagelocations"));
            request14.Timeout = 60;
            request14.Headers.Add(new WebTestRequestHeader("pragma", "no-cache"));
            //request14.Headers.Add(new WebTestRequestHeader("request-id", "c349f6f8-ad7f-4e85-b2dc-11eafcb6f386"));
            request14.Headers.Add(new WebTestRequestHeader("whoami", "fetchMiddleware"));
            request14.Headers.Add(new WebTestRequestHeader("content-type", "application/json"));
            request14.Headers.Add(new WebTestRequestHeader("Sec-Fetch-Site", "same-origin"));
            request14.Headers.Add(new WebTestRequestHeader("Sec-Fetch-Mode", "cors"));
            //yield return request14;
            request14 = null;

            WebTestRequest request15 = new WebTestRequest((this.Context[nameof(WebTestEx.WebServer1)].ToString() + "/v1/odata/categories"));
            request15.Timeout = 60;
            request15.Headers.Add(new WebTestRequestHeader("pragma", "no-cache"));
            //request15.Headers.Add(new WebTestRequestHeader("request-id", "70666894-70bf-4920-a230-b85bd7ea8f5b"));
            request15.Headers.Add(new WebTestRequestHeader("whoami", "fetchMiddleware"));
            request15.Headers.Add(new WebTestRequestHeader("content-type", "application/json"));
            request15.Headers.Add(new WebTestRequestHeader("Sec-Fetch-Site", "same-origin"));
            request15.Headers.Add(new WebTestRequestHeader("Sec-Fetch-Mode", "cors"));
            request15.QueryStringParameters.Add("$top", "10");
            ExtractHttpHeader extractionRule15_1 = new ExtractHttpHeader();
            extractionRule15_1.Header = "XSRF-TOKEN";
            extractionRule15_1.Required = true;
            extractionRule15_1.ContextParameterName = "param_sta";
            request15.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule15_1.Extract);

            yield return request15;
            request15 = null;

            this.EndTransaction("Home Page Exclude Authentication");

            this.EndTransaction("Home Page Include Authentication");

            WebTestRequest request11 = new WebTestRequest((this.Context[nameof(WebTestEx.WebServer1)].ToString() + "/v1/odata/categoryelements"));
            request11.ThinkTime = 20;
            request11.Timeout = 60;
            request11.Headers.Add(new WebTestRequestHeader("pragma", "no-cache"));
            //request11.Headers.Add(new WebTestRequestHeader("request-id", "92561e8a-88c2-45ed-9fe8-1bc9afc9aa03"));
            request11.Headers.Add(new WebTestRequestHeader("whoami", "fetchMiddleware"));
            request11.Headers.Add(new WebTestRequestHeader("content-type", "application/json"));
            request11.Headers.Add(new WebTestRequestHeader("Sec-Fetch-Site", "same-origin"));
            request11.Headers.Add(new WebTestRequestHeader("Sec-Fetch-Mode", "cors"));
            request11.QueryStringParameters.Add("$expand", "category");
            //yield return request11;
            request11 = null;
        }
    }
}

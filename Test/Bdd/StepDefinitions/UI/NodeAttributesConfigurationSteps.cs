// --------------------------------------------------------------------------------------------------------------------
// <copyright file="NodeAttributesConfigurationSteps.cs" company="Microsoft">
//    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
//    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
//    OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
//    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//    OTHER DEALINGS IN THE SOFTWARE.
// </copyright>
// <auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Ecp.True.Bdd.Tests.StepDefinitions.UI
{
    using TechTalk.SpecFlow;

    [Binding]
    public class NodeAttributesConfigurationSteps : EcpWebStepDefinitionBase
    {
        [When(@"I search and add one more owner")]
        public void WhenISearchAndAddOneMoreOwner()
        {
            ScenarioContext.Current.Pending();
        }

        [When(@"I enter values for all the associated owners so that the sum of them is more than (.*)%")]
        public void WhenIEnterValuesForAllTheAssociatedOwnersSoThatTheSumOfThemIsMoreThan(int p0)
        {
            ScenarioContext.Current.Pending();
        }

        [When(@"I enter values for all the associated owners so that the sum of them is less than (.*)%")]
        public void WhenIEnterValuesForAllTheAssociatedOwnersSoThatTheSumOfThemIsLessThan(int p0)
        {
            ScenarioContext.Current.Pending();
        }

        [When(@"I enter values for all the associated owners so that the sum of them is equal to (.*)%")]
        public void WhenIEnterValuesForAllTheAssociatedOwnersSoThatTheSumOfThemIsEqualTo(int p0)
        {
            ScenarioContext.Current.Pending();
        }

        [Then(@"I should see the list of nodes that meets the filter conditions")]
        public void ThenIShouldSeeTheListOfNodesThatMeetsTheFilterConditions()
        {
            ScenarioContext.Current.Pending();
        }

        [Then(@"I should see the list of warehouse and product associations relating to that node")]
        public void ThenIShouldSeeTheListOfWarehouseAndProductAssociationsRelatingToThatNode()
        {
            ScenarioContext.Current.Pending();
        }

        [Then(@"the new value should be updated in the ""(.*)""")]
        public void ThenTheNewValueShouldBeUpdatedInThe(string p0)
        {
            ScenarioContext.Current.Pending();
        }

        [Then(@"the new value should be updated")]
        public void ThenTheNewValueShouldBeUpdated()
        {
            ScenarioContext.Current.Pending();
        }

        [Then(@"the added owner should be displayed in the list")]
        public void ThenTheAddedOwnerShouldBeDisplayedInTheList()
        {
            ScenarioContext.Current.Pending();
        }

        [Then(@"the new values should be updated in the ""(.*)""")]
        public void ThenTheNewValuesShouldBeUpdatedInThe(string p0)
        {
            ScenarioContext.Current.Pending();
        }
    }
}

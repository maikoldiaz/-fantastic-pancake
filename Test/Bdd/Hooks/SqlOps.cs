// --------------------------------------------------------------------------------------------------------------------
// <copyright file="SqlOps.cs" company="Microsoft">
//   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
//   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
//   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
//   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//   OTHER DEALINGS IN THE SOFTWARE.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------
// <auto-generated />

namespace Ecp.True.Bdd.Tests.Hooks
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Reflection;
    using System.Threading.Tasks;

    using Ecp.True.Bdd.Tests.Entities;

    using global::Bdd.Core.Utils;

    public class SqlOps : global::Bdd.Core.Hooks.SqlOperations
    {
        private static readonly List<(FieldInfo Name, string Value)> SqlQueryFields = typeof(SqlQueries).GetFields(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.DeclaredOnly).Select(f => (f, f.GetValue(null)?.ToString())).ToList();

        public async Task<object> Query(string member, params string[] contextKeys)
        {
            var query = SqlQueryFields.SingleOrDefault(x => x.Name.Name.Equals(member.Split('.').LastOrDefault(), StringComparison.OrdinalIgnoreCase)).Value ?? member;
            if (!string.IsNullOrWhiteSpace(query))
            {
                var args = this.CreateObject(contextKeys);
                var result = await this.Sql.ReadAsExpandoAsync(query, args: args);
                return result;
            }
            else
            {
                throw new NotImplementedException($"{nameof(SqlQueryFields)}: {member}");
            }
        }

        public async Task<IEnumerable<object>> QueryAll(string member, params string[] contextKeys)
        {
            var query = SqlQueryFields.SingleOrDefault(x => x.Name.Name.Equals(member.Split('.').LastOrDefault(), StringComparison.OrdinalIgnoreCase)).Value ?? member;
            if (!string.IsNullOrWhiteSpace(query))
            {
                var args = this.CreateObject(contextKeys);
                var result = await this.Sql.ReadAllAsExpandoAsync(query, args: args);
                return result;
            }
            else
            {
                throw new NotImplementedException($"{nameof(SqlQueryFields)}: {member}");
            }
        }

        public async Task DeleteTestDataAsync()
        {
            var inventoryRow = await this.Sql.ReadAllAsDictionaryAsync(input: SqlQueries.GetMultipleInventories, args: new { inventoryId1 = ConstantValues.InventoryId1, inventoryId2 = ConstantValues.InventoryId2, inventoryId3 = ConstantValues.InventoryId3 }).ConfigureAwait(false);
            foreach (var row in inventoryRow)
            {
                await this.Sql.ReadAllAsync<dynamic>(input: SqlQueries.DeleteInventoryId, args: new { inventoryTransactionId = row[ConstantValues.InventoryTransactionId] }).ConfigureAwait(false);
            }

            var movementRow = await this.Sql.ReadAllAsDictionaryAsync(input: SqlQueries.GetMultipleMovements, args: new { movementId1 = ConstantValues.MovementId1, movementId2 = ConstantValues.MovementId2, movementId3 = ConstantValues.MovementId3 }).ConfigureAwait(false);
            foreach (var row in movementRow)
            {
                await this.Sql.ReadAllAsync<dynamic>(input: SqlQueries.DeleteMovementId, args: new { movementTransactionId = row[ConstantValues.MovementTransactionId] }).ConfigureAwait(false);
            }
        }
    }
}
stages:
  - stage: DBBackUp
    jobs:
      - deployment: BackUp
        pool:
          vmImage: "windows-latest"
        environment: $(envInfra)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadBuildArtifacts@0
                  displayName: "Download Build Artifacts"
                  inputs:
                    artifactName: Drop
                    downloadPath: "$(System.ArtifactsDirectory)"

                - powershell: |
                    $date=$(Get-Date -Format g);
                    Write-Host "##vso[task.setvariable variable=creationDate]$date"
                  displayName: "Set Date Tag"

                - task: AzurePowerShell@4
                  displayName: Get Storage Connections
                  inputs:
                    azureSubscription: "$(serviceConnection)"
                    ScriptPath: "$(System.ArtifactsDirectory)/Drop/Scripts/Set-StorageAccountConnections.ps1"
                    ScriptArguments: '-vaultName "$(keyVault)" -storageAccountName "$(storageAccountName)" -resourceGroupName "$(resourceGroupName)" -storageAccountKeyName "$(storageAccountKeyName)" -storageAccessKeyName "$(storageAccessKeyName)" -dataEncryptionStorageSecret "Settings--StorageConnectionString" -webAppsForAppSettingsUpdate "$(webAppsForAppSettingsUpdate)"'
                    azurePowerShellVersion: LatestVersion

                - template: ../Infra/fetchSecrets.yml
                  parameters:
                    azureSubscriptionName: "$(serviceConnection)"
                    keyVaultName: "$(keyVault)"
                    secretsFilter: "*"

                - task: AzurePowerShell@4
                  displayName: DB Backup of Customer Database
                  inputs:
                    azureSubscription: "$(serviceConnection)"
                    ScriptPath: "$(System.ArtifactsDirectory)/Drop/Scripts/BackUp-Database.ps1"
                    ScriptArguments: '-ModulePath "$(System.ArtifactsDirectory)\Drop\Scripts\Modules" -SqlServerConnectionString "$(sqlconnectionstring)" -DatabaseName "$(databaseName)" -StorageAccountConnectionString "$(storageconnectionstring)" -BlobContainerName "$(dbBackupsBlobContainer)" -SqlPackageExePath "$(sqlPackageExePath)" -offshoreChanges "false" -customerDbBackUp "true"'
                    azurePowerShellVersion: LatestVersion
                  condition: and(succeeded(), eq(${{parameters.dbBackUp}}, 'true'))

                  ##offshoreFlag
                - task: AzurePowerShell@4
                  displayName: Restore Database for Offshore Automation
                  inputs:
                    azureSubscription: "$(serviceConnection)"
                    ScriptPath: "$(System.ArtifactsDirectory)/Drop/Scripts/Restore-Database.ps1"
                    ScriptArguments: '-ModulePath "$(System.ArtifactsDirectory)\Drop\Scripts\Modules" -customerRestore "false" -offshoreChanges "$(offshoreChanges)" -ResourceGroupName "$(sharedResourceGroupName)" -SqlServerConnectionString "$(sqlconnectionstring)" -ServerNameFullName "$(sqlServerName)" -DatabaseName "$(databaseName)" -StorageAccountConnectionString "$(storageconnectionstring)" -BlobContainerName "$(dbBackupsBlobContainer)" -packageExecutable "$(sqlPackageExePath)" -blobDownloadLocation "C:\" -userIdRestore "$(dbUserIdRestore)" -userPasswordRestore "$(dbUserPasswordRestore)"'
                    azurePowerShellVersion: LatestVersion
                  condition: and(succeeded(),eq(variables['offshoreChanges'], 'true'), eq(${{parameters.dbBackUp}}, 'true'))

                - task: AzureCLI@2
                  displayName: Set Environment Variable For Automation Script Permission in Key-Vault
                  inputs: 
                    azureSubscription: "$(serviceConnection)"
                    scriptType: ps
                    ScriptPath: '$(System.ArtifactsDirectory)/Drop/Scripts/Set-KeyVault-Secret.ps1'
                    arguments: '-keyVaultName "$(keyVault)" -secretName "CanExecuteAutomation" -secretValueÂ "true"'

                - task: AzurePowerShell@4
                  displayName: Get Storage Connections
                  inputs:
                    azureSubscription: "$(serviceConnection)"
                    ScriptPath: "$(System.ArtifactsDirectory)/Drop/Scripts/Set-StorageAccountConnections.ps1"
                    ScriptArguments: '-vaultName "$(keyVault)" -storageAccountName "$(storageAccountName)off" -resourceGroupName "$(resourceGroupName)" -storageAccountKeyName "$(storageAccountKeyName)" -storageAccessKeyName "$(storageAccessKeyName)" -dataEncryptionStorageSecret "Settings--StorageConnectionString" -webAppsForAppSettingsUpdate "$(webAppsForAppSettingsUpdate)"'
                    azurePowerShellVersion: LatestVersion
                  condition: and(succeeded(), eq(${{parameters.dbBackUp}}, 'true'))

                - task: SqlAzureDacpacDeployment@1
                  displayName: Deploy Latest on Offshore Automation DB Backup
                  inputs:
                    Database: "appdb"
                    azureSubscription: "$(serviceConnection)"
                    AuthenticationType: "connectionString"
                    ConnectionString: "$(sqlconnectionstring)"
                    deployType: "DacpacTask"
                    DeploymentAction: "Publish"
                    DacpacFile: "$(System.ArtifactsDirectory)/Drop/SQL/bin/Debug/Ecp.True.DI.Sql.dacpac"
                    AdditionalArguments: "/p:BlockOnPossibleDataLoss=False /p:GenerateSmartDefaults=True /v:serverName=null /v:baseUrl=https://$(dnsNameForUI)"
                    IpDetectionMethod: "AutoDetect"
                  condition: and(succeeded(), eq(variables['offshoreChanges'], 'true'), eq(${{parameters.dbBackUp}}, 'true'))

                - template: ../Infra/fetchSecrets.yml
                  parameters:
                    azureSubscriptionName: "$(serviceConnection)"
                    keyVaultName: "$(keyVault)"
                    secretsFilter: "*"

                - template: ../restartServices.yml

                - template: ../Infra/redis.flush.yml
                  parameters:
                    serviceConnection : $(serviceConnection)
                    env: '$(env)'
                    storageAccountName: '$(storageAccountName)off'
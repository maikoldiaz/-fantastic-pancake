steps:
- task: DownloadBuildArtifacts@0
  displayName: Download Build Artifacts
  inputs:
    artifactName: Drop
    downloadPath: '$(System.ArtifactsDirectory)'
  condition: and(succeeded(), eq('${{parameters.downloadArtifacts}}', 'true'))

- template: ../Infra/fetchSecrets.yml
  parameters:
    azureSubscriptionName : '${{parameters.serviceConnection}}'
    keyVaultName: '$(keyVault)'
    secretsFilter: '*'

- task:  AzurePowerShell@4
  displayName: Backup Database
  inputs:
    azureSubscription: '${{parameters.serviceConnection}}'
    ScriptPath: '$(System.ArtifactsDirectory)/Drop/Scripts/Create-DatabaseBackup.ps1'
    ScriptArguments: '-ModulePath "$(System.ArtifactsDirectory)\Drop\Scripts\Modules" -SqlServerConnectionString "$(sqlconnectionstring)" -ServerName "$(sqlServerName)" -DatabaseName "$(databaseName)" -StorageAccountConnectionString "$(storageconnectionstring)" -BlobContainerName "$(dbBackupsBlobContainer)" -SqlPackageExePath "$(sqlPackageExePath)" -Clone "$(cloneDatabase)" -ResourceGroupName "$(sharedResourceGroupName)"'
    azurePowerShellVersion: LatestVersion
  condition: and(succeeded(), eq(variables['databaseBackup'], 'true'))

- task: SqlAzureDacpacDeployment@1
  displayName: Deploy DACPAC
  inputs:
    Database: 'appdb'
    azureSubscription: '${{parameters.serviceConnection}}'
    AuthenticationType: 'connectionString'
    ConnectionString: '$(sqlconnectionstring)'
    deployType: 'DacpacTask'
    DeploymentAction: 'Publish'
    DacpacFile: '$(System.ArtifactsDirectory)/Drop/SQL/bin/Debug/Ecp.True.DI.Sql.dacpac'
    AdditionalArguments: '/p:BlockOnPossibleDataLoss=False /p:GenerateSmartDefaults=True /v:serverName=null /v:baseUrl=https://$(dnsNameForUI)'
    IpDetectionMethod: 'AutoDetect'
  condition: succeeded()
steps:
 - task: AzureCLI@2
   displayName: Set Analysis settings client secret in Key-Vault
   inputs:
     azureSubscription: "$(serviceConnection)"
     scriptType: ps
     ScriptPath: '$(System.ArtifactsDirectory)/Drop/Scripts/Set-KeyVault-Secret.ps1'
     arguments: '-keyVaultName "$(keyVault)" -secretName "$(analysisClientSecret)" -secretValue "$(aasAppSecret)"'
   condition:  and(succeeded(), eq(variables['analysis'], 'true'))

 - task: AzureCLI@2
   displayName: Set Analytics server client secret in Key-Vault
   inputs:
     azureSubscription: "$(serviceConnection)"
     scriptType: ps
     ScriptPath: '$(System.ArtifactsDirectory)/Drop/Scripts/Set-KeyVault-Secret.ps1'
     arguments: '-keyVaultName "$(keyVault)" -secretName "$(analyticsClientSecret)" -secretValue "$(analyticsAppSecret)"'
   condition:  and(succeeded(), eq(variables['analytics'], 'true'))

 - task: AzureCLI@2
   displayName: Set Availability Application Secret in KV
   inputs:
     azureSubscription: "$(serviceConnection)"
     scriptType: ps
     ScriptPath: '$(System.ArtifactsDirectory)/Drop/Scripts/Set-KeyVault-Secret.ps1'
     arguments: '-keyVaultName "$(keyVault)" -secretName "AvailabilityClientSecret" -secretValue "$(availabilityClientSecret)"'
   condition:  and(succeeded(), eq(variables['availability'], 'true'))

 - task: AzureCLI@2
   displayName: Set Blockchain AD Client Secret In Key-Vault
   inputs:
     azureSubscription: "$(serviceConnection)"
     scriptType: ps
     ScriptPath: '$(System.ArtifactsDirectory)/Drop/Scripts/Set-KeyVault-Secret.ps1'
     arguments: '-keyVaultName "$(keyVault)" -secretName "BlockchainClientSecret" -secretValue "$(bcAppSecret)"'
   condition:  and(succeeded(), eq(variables['blockchain'], 'true'))

 - task: AzureCLI@2
   displayName: Set Ownership rule Client Secret in KV
   inputs:
     azureSubscription: "$(serviceConnection)"
     scriptType: ps
     ScriptPath: '$(System.ArtifactsDirectory)/Drop/Scripts/Set-KeyVault-Secret.ps1'
     arguments: '-keyVaultName "$(keyVault)" -secretName "OwnershipRuleClientSecret" -secretValue "$(ownershipRuleClientSecret)"'
   condition:  and(succeeded(), eq(variables['ownership'], 'true'))

 - task: AzureCLI@2
   displayName: Set Sap Password in KV
   inputs:
     azureSubscription: "$(serviceConnection)"
     scriptType: ps
     ScriptPath: '$(System.ArtifactsDirectory)/Drop/Scripts/Set-KeyVault-Secret.ps1'
     arguments: '-keyVaultName "$(keyVault)" -secretName "SapPassword" -secretValue "$(sapPassword)"'
   condition:  and(succeeded(), eq(variables['sap'], 'true'))

 - task: AzureCLI@2
   displayName: Set Auth Application Secret in KV
   inputs:
     azureSubscription: "$(serviceConnection)"
     scriptType: ps
     ScriptPath: '$(System.ArtifactsDirectory)/Drop/Scripts/Set-KeyVault-Secret.ps1'
     arguments: '-keyVaultName "$(keyVault)" -secretName "AzureAd--ClientSecret" -secretValue "$(uiAppSecret)"'
   condition:  and(succeeded(), eq(variables['ui'], 'true'))

 - task: AzureCLI@2
   displayName: Set Report client secret in Key-Vault
   inputs:
     azureSubscription: "$(serviceConnection)"
     scriptType: ps
     ScriptPath: '$(System.ArtifactsDirectory)/Drop/Scripts/Set-KeyVault-Secret.ps1'
     arguments: '-keyVaultName "$(keyVault)" -secretName "PowerBIAppSecret" -secretValue "$(powerBIAppSecret)"'
   condition: and(succeeded(), eq(variables['powerBi'], 'true'))
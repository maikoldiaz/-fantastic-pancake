steps:
  - task: AzurePowerShell@4
    displayName: DB Backup of Customer Database
    inputs:
      azureSubscription: "$(serviceConnection)"
      ScriptPath: "$(System.ArtifactsDirectory)/Drop/Scripts/BackUp-Database.ps1"
      ScriptArguments: '-ModulePath "$(System.ArtifactsDirectory)\Drop\Scripts\Modules" -SqlServerConnectionString "$(sqlconnectionstring)" -DatabaseName "$(databaseName)" -StorageAccountConnectionString "$(storageconnectionstring)" -BlobContainerName "$(dbBackupsBlobContainer)" -SqlPackageExePath "$(sqlPackageExePath)" -offshoreChanges "false" -customerDbBackUp "true"'
      azurePowerShellVersion: LatestVersion
    condition: and(succeeded(), eq(${{parameters.dbBackUp}}, 'true'))

    ##offshoreFlag
  - task: AzurePowerShell@4
    displayName: Restore Database for Offshore Automation
    inputs:
      azureSubscription: "$(serviceConnection)"
      ScriptPath: "$(System.ArtifactsDirectory)/Drop/Scripts/Restore-Database.ps1"
      ScriptArguments: '-ModulePath "$(System.ArtifactsDirectory)\Drop\Scripts\Modules" -customerRestore "false" -offshoreChanges "$(offshoreChanges)" -ResourceGroupName "$(sharedResourceGroupName)" -SqlServerConnectionString "$(sqlconnectionstring)" -ServerNameFullName "$(sqlServerName)" -DatabaseName "$(databaseName)" -StorageAccountConnectionString "$(storageconnectionstring)" -BlobContainerName "$(dbBackupsBlobContainer)" -packageExecutable "$(sqlPackageExePath)" -blobDownloadLocation "C:\" -userIdRestore "$(dbUserIdRestore)" -userPasswordRestore "$(dbUserPasswordRestore)"'
      azurePowerShellVersion: LatestVersion
    condition: and(succeeded(),eq(variables['offshoreChanges'], 'true'), eq(${{parameters.dbBackUp}}, 'true'))

  - task: SqlAzureDacpacDeployment@1
    displayName: Deploy Latest on Offshore Automation DB Backup
    inputs:
      Database: "appdb"
      azureSubscription: "$(serviceConnection)"
      AuthenticationType: "connectionString"
      ConnectionString: "$(sqlconnectionstring)"
      deployType: "DacpacTask"
      DeploymentAction: "Publish"
      DacpacFile: "$(System.ArtifactsDirectory)/Drop/SQL/bin/Debug/Ecp.True.DI.Sql.dacpac"
      AdditionalArguments: "/p:BlockOnPossibleDataLoss=False /p:GenerateSmartDefaults=True /v:serverName=null /v:baseUrl=https://$(dnsNameForUI)"
      IpDetectionMethod: "AutoDetect"
    condition: and(succeeded(), eq(variables['offshoreChanges'], 'true'), eq(${{parameters.dbBackUp}}, 'true'))
